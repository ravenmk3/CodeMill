@model EnumTemplateModel
@{
    var cs = new CSharpCodeHelper(this);
    var enumx = this.Model.Enum;
    var fields = this.Model.Enum.Fields;
    var count = fields.Count;

}using System;
using System.ComponentModel;

namespace @Model.GetParameter("Namespace.Enum")
{
    /// <summary>
    /// Enum: @enumx.Name
    /// </summary>
    [Serializable]
    @if(cs.UnderlyingTypeRequired(enumx))
    {
    <text>public enum @enumx.Name : @cs.UnderlyingType(enumx)</text>
    }
    else
    {
    <text>public enum @enumx.Name</text>
    }
    {
        @for (int i = 0; i < count; i++)
        {
            var field = fields[i];
            @Raw("        /// <summary>\r\n")
            @Raw("        /// " + field.Comment + "\r\n")
            @Raw("        /// </summary>\r\n")
            @Raw("        [Description(\"" + field.Name + "\")]\r\n")
            var s = "        " + field.Name + " = " + field.Value + (i == (count - 1) ? String.Empty : ",\r\n") + "\r\n";
            @Raw(s)
        }
    }
}
